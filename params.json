{"name":"Keysmith","tagline":"keysmith is an asymmetric cryptography showcase for java","body":"keysmith\r\n========\r\n\r\nkeysmith is a cross-platform cryptography showcase with following components:\r\n\r\n * public-key store - Java REST service implementation developed using [dropwizard](https://github.com/codahale/dropwizard).\r\n * [Java Client Library](https://github.com/hakandilek/keysmith/tree/master/keysmith-client)\r\n * [C#/.net Client Library](https://github.com/hakandilek/keysmith/tree/master/dotnet-client)\r\n * [Objective-C/IOS Client Library](https://github.com/hakandilek/keysmith/tree/master/ios-client)\r\n\r\nKeysmith introduces 3 schemes for encrypting/decrypting data:\r\n\r\n * Public Key Encryption\r\n * Secret Key (Asymmetric) Encryption\r\n * Hybrid Encryption combining two above\r\n \r\n\r\nPublic Key Encryption\r\n----------\r\n\r\nWith public key encryption clients generate a key pair, and store the \r\npublic key on the server. Another client encrypts a message retrieving the key \r\nfrom the server and puts this encrypted message on the server. First client\r\nretrieves the encrypted message from the server and decrypts it using his own\r\nprivate key.\r\n\r\nWith this method, message size is limited to the key size \r\n(keysize / 8 - padding to be exact).\r\n\r\n![asymmetric implementation](https://raw.github.com/hakandilek/keysmith/master/asymmetric.jpg \"asymmetric implementation\")\r\n\r\nSecret Key Encryption\r\n----------\r\n\r\nWith secret key encryption model, client generates a secret key and stores it \r\nwithin the message. Other client receiving the message decrypts it using the \r\nenclosed secret key. There's absolutely no security.\r\n\r\nHybrid Encryption\r\n----------\r\n\r\nHybrid implementation is a combination of the above schemes. First client \r\ngenerates a key pair and a secret key. While key from the key pair is stored on \r\nthe server, secret key is encrypted with this public key and message is encrypted\r\nwith the secret key. Thus, the message send to the server contains encrypted \r\nsecret key and the encrypted message. Other client receiving the message first \r\ndecrypts the secret key with the private key, then decrypts the message with \r\nthe secret key.\r\n \r\nThis method has a slight advantage over the public encryption scheme because \r\nthere's no limitation on the message size and performing secret key encryption on \r\nthe message has a slightly huge performance advantage. \r\n\r\n![hybrid implementation](https://raw.github.com/hakandilek/keysmith/master/hybrid.jpg \"hybrid implementation\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}